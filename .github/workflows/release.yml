name: Release Docker Image

on:
  release:
    types: [published]

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PKGTOKEN }}

      - name: Set up VERSION environment variable
        run: echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - name: Set up IMAGE_NAME environment variable
        run: |
          ORG_REPO="${{ github.repository }}"
          ORG=$(echo "${ORG_REPO}" | cut -d '/' -f 1 | tr '[:upper:]' '[:lower:]')
          REPO=$(echo "${ORG_REPO}" | cut -d '/' -f 2 | tr '[:upper:'] '[:lower:]')
          IMAGE_NAME="ghcr.io/${ORG}/${REPO}/${REPO}-app"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: Pull latest image
        run: docker pull ${{ env.IMAGE_NAME }}:latest

      - name: Tag image with release version
        run: docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Push image to GitHub Container Registry
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}

  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.2'

    - name: Enable Go Modules and Download Dependencies
      run: |
        go mod tidy
        go mod download

    - name: Install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        echo "$GOPATH/bin" >> $GITHUB_PATH

    - name: Install Docker
      run: |
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io

    - name: Install Docker Compose
      run: |
        sudo wget "https://github.com/docker/compose/releases/download/v2.33.1/docker-compose-linux-x86_64" -O /usr/bin/docker-compose
        sudo chmod +x /usr/bin/docker-compose

    - name: Build and Release
      run: make release

    - name: Upload artifacts 1
      uses: actions/upload-artifact@v4
      with:
        name: StealthIMUser
        path: ./bin/StealthIMUser
          
    - name: Upload artifacts 2 
      uses: actions/upload-artifact@v4
      with:
        name: StealthIMUser.exe
        path: ./bin/StealthIMUser.exe
          
    - name: Upload artifacts 3
      uses: actions/upload-artifact@v4
      with:
        name: StealthIMUser.docker.zst
        path: ./bin/StealthIMUser.docker.zst
  set-release:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      packages: write
      contents: write

    steps:
      - name: Download File Linux
        uses: actions/download-artifact@v4
        with:
          name: StealthIMUser

      - name: Download File Windows
        uses: actions/download-artifact@v4
        with:
          name: StealthIMUser.exe

      - name: Download File Docker
        uses: actions/download-artifact@v4
        with:
          name: StealthIMUser.docker.zst

      - name: Update Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            StealthIMUser
            StealthIMUser.exe
            StealthIMUser.docker.zst
